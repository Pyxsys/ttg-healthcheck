#!/bin/bash
#==========================================
#Author: Pierre-Alexis Barras (Pyxsys)
#Verified Environments:
#	Debian GNU/Linux v.10
#==========================================

#Variables ==============
name="celebi"
console_prefix="[Script: $name]"

#Functions ==============
exitProcess() {
	case $1 in
		"0")
			echo $console_prefix Script ended successfully.
			exit 0
			;;
		*)
			echo $console_prefix Script ended with error \($1\).
		 	exit 1
			;;

		esac
}

lockCheck () {
	uuid_key=`cat /proc/sys/kernel/random/uuid`
	lock_file="/tmp/${0##*/}d.lock"

	if test -f "$lock_file" ; then
		old_uuid=`cat $lock_file | awk '{print $2}'`
		if [ "$old_uuid" == "$uuid_key" ]; then
			echo "$console_prefix Duplicate uuid,"
			echo "		New uuid: $uuid_key"
			echo "		Old uuid: $old_uuid"
		else
			timestamp=`cat $lock_file | awk '{print $1}'`
			echo "$console_prefix (Error) An instance of this program is already running."
			echo
			echo "		Instance was created at: `date -d@$timestamp`"
			echo "		Please end any existing daemons before starting a new ${name}d instance."
			echo "		You can do so by using the '--kill' flag to kill the process:"
		       	echo "			eg. ./${name} --kill"
			echo
			exitProcess 1
		fi
	else
		echo "`date +%s` $uuid_key" > $lock_file	
		echo "$console_prefix Lock file created: /tmp/${name}d.lock"
	fi
}

printHelp() {
	cat .readme
	exit 0
}

stopDaemon() {	
	echo "$console_prefix Stopping celebid..."

	#kill daemon process
	kill $(ps aux | grep '[c]elebid' | awk '{print $2}') 2>/dev/null
	if [ $? -eq 0 ]; then
		echo "...celebid stopped."
	else
		echo "$console_prefix (Error) Failure when stopping celebid daemon."
	fi
	
	#get lockfile
	lock_file_path=`find /tmp/${name}d.lock 2>/dev/null`
	if [ -z "$lock_file_path" ]; then
		echo "$console_prefix (Error) File not found: /tmp/celebid.lock"
		exitProcess 1
	else
		#delete lockfile
		rm $lock_file_path
		echo "$console_prefix Removed lock file: celebid.lock"
	fi
	exitProcess 0
}

startDaemon() {
	echo "$console_prefix Verifying environment..."

	#fetch python module in system
	module=`find / -type f -name "system_report.py" 2>&1 | grep -v "Permission denied"`
	
	#fetch config file in current dir neigbourhood
	config=`find $(pwd) -maxdepth 2 -type f -name "config.json"`

	#verify paths
	if [ -z "$module" ]; then
		echo "$console_prefix (Error) Module 'system_report.py' not found."
		exitProcess 1
	fi
	if [ -z "$config" ]; then
		echo "$console_prefix (Error) Configuration file 'config.json' not found."
		exitProcess 1
	fi
	
	echo "$console_prefix Starting celebid process..."
	
	#set unique uuid/check for existing process
	lockCheck
			
	dir=$(cd -P -- "$(dirname -- "$)")" && pwd -P)
	echo "$console_prefix Output log for daemon is: ${dir}/${name}d.log"

	#fork child
	nohup $dir/celebid $module $config 0<&- &> "${dir}/${name}d.log" &

	echo "$console_prefix ${name}d daemon started."

	#end parent
	exit 0
}


#Main Logic ============
#check flags
if [ $# -eq 0 ]; then 
	printHelp
fi

while test $# != 0 ; do
	case "$1" in
		-h | --help) printHelp;;
		-s | --start) startDaemon;;
		-k | --kill) stopDaemon ;;
		*)  echo "$console_prefix (Error) Unkown flag '$1'."
		    printHelp ;;
	esac
done
